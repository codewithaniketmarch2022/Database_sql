- A database is an organized collection of data stored in a computer system and usually controlled by a   database management system (DBMS). 

-Types of the database as follows - 

- Hierarchical databases-
- Network databases-
- Object-oriented databases-
- Relational databases-
- Cloud Database-
- Centralized Database-
- Operational Database-
- NoSQL databases- 


1)Hierarchical databases - 
Hierarchical databases are useful when you need to represent data in a tree-like hierarchy. The perfect example of a hierarchical data model is the navigation file.

2)Network databases - 
A network database is a database model where numerous records or files can link to multiple owner files.

3)Object-oriented databases -
object-oriented databases (OODB) are databases that represent data in the form of objects and classes. In object-oriented terminology, an object is a real-world entity, and a class is a collection of objects. Object-oriented databases follow the fundamental principles of object-oriented programming (OOP).

4)Relational databases -
A relational database is a collection of information that organizes data in predefined relationships where data is stored in one or more tables (or "relations") of columns and rows, making it easy to see and understand how different data structures relate to each other.

5)Cloud Database -
A cloud database is a database built to run in a public or hybrid cloud environment to help organize, store, and manage data within an organization.

6)Centralized Database -
A centralized database (sometimes abbreviated CDB) is a database that is located, stored, and maintained in a single location.......e.g cpu

7)Operational Database -
Operational databases, which can be based on SQL vs. NoSQL, are the source for data warehouses and are critical to business analytics operations. Popular operational database examples include Apache Cassandra and AWS DynamoDB.

8)NoSQL databases -
NoSQL is a type of database management system (DBMS) that is designed to handle and store large volumes of unstructured and semi-structured data.......




-if you want to see the table description after table creation then use command i.e      desc table_name


DDL  -
*****
1)create  -
This command is used to create the database or its objects (like table, index, function, views, store procedure, and triggers).  

CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);


syntax for insert values in table -
INSERT INTO table_name values(value1, value2, value3, ...);

INSERT INTO table_name (column1, column2, column3, ...)values(value1, value2, value3, ...);



2)rename  -
This is used to rename the structure of the database.

(syntax for_table)-
ALTER TABLE table_name
RENAME TO new_table_name;

(syntax for column)-
ALTER TABLE table_name
RENAME COLUMN old_name TO new_name;


3)Drop -
This command is used to delete objects from the database.

(syntax for_table)-
DROP TABLE table_names;

(syntax for column)-
ALTER TABLE table_name
DROP COLUMN column_names;


4)Truncate  -The TRUNCATE TABLE command deletes the data inside a table, but not the table itself.
TRUNCATE TABLE table_name;

5)Alter -The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
 -To add a column in a table, use the following syntax:-
  ALTER TABLE table_name ADD column_name datatype;
  
 -To delete a column in a table, use the following syntax
  ALTER TABLE table_name DROP COLUMN column_name;
 
 -To rename a column in a table, use the following syntax:
  ALTER TABLE table_name RENAME COLUMN old_name to new_name;


DML -
*****
1)INSERT: It is used to insert data into a table.
syntax - INSERT INTO table_name VALUES (value1, value2, value3, ...);

-Insert Multiple Rows It is also possible to insert multiple rows in one statement.
e.g - INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES
('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'),
('Greasy Burger', 'Per Olsen', 'Gateveien 15', 'Sandnes', '4306', 'Norway'),
('Tasty Tee', 'Finn Egan', 'Streetroad 19B', 'Liverpool', 'L1 0AA', 'UK');



2)UPDATE: It is used to update existing data within a table.
syntax - UPDATE table_name
         SET column1 = value1, column2 = value2, ...
         WHERE condition;

e.g     UPDATE Customers
        SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
        WHERE CustomerID = 1;

3)DELETE: It is used to delete records from a database table.
syntax - DELETE FROM table_name WHERE condition;
e.g    - DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';



TCL - 
*****
1) Commit - If you want to save all the commands which are executed in a transaction, then just after                      completing the transaction, you have to execute the commit command. This command will save all the             commands which are executed on a table. All these changes made to the table will be saved to the               disk permanently.
           -Whenever the commit command is executed in SQL, all the updations which we have carried on the                 table will be uploaded to the server, and hence our work will be saved.
           -for the turn off the auto-commit by setting the value of auto-commit=0; and for turn on auto-                  commit=1;

2) rollback -The rollback command is used to get back to the previous permanent status of the table, which is              saved by the commit command.We will execute the ROLLBACK command to get the original table that              we have saved before executing the last command.
            -scope of rollback command is up to previous commit.........


3) savepoint - this is a point where you can rollback your transaction to a certain point...
-syntax for create savepoint-  savepoint savepoint_name;
-syntax for rollback transactions upto savepoint-  rollback to savepoint_name;


DQL -
*****
1)Select- It is used to retrieve data from the database........ 


DCL- (Data Control Language)
****************************
DCL includes commands such as GRANT and REVOKE which mainly deal with the rights, permissions, and other controls of the database system.

-first check how many users in your system by using command           select user from mysql.user;
 after this command it will show you lists of users.....then if you want to check the what are the permissions having user then use following command    show grants for 'root'@'localhost';      here root is username this command will show you all permissions of that user......
-if you want to give all permissions to user then use following command-   GRANT ALL PRIVILEGES ON * . * To 'root'@'localhost'; 
here root is a username......... 
-if you want to remove all permissions to user then use following command-  REVOKE ALL PRIVILEGES ON * . * From 'root'@'localhost'; 
here root is a username.........

types of the permission list-
-all PRIVILEGES -this would allow a mysql user full access to a designed database......
-create  -allows them for create new tables or database......
-drop  -allows them for delete new tables or database......
-delete  -allows them for delete rows from tables......
-Insert  -allows them to insert rows into tables.....
-update  -allows them to update rows in table.......



1)Grant - It helps to provide any kind of access to any user.......
e.g   grant select,update on student to rahul    -here select and update permissions are given to rahul user on the student table.........

2)revoke - It is used to take back the access from user.......  
e.g   revoke select,update on student to rahul    -here select and update permissions are not given to rahul user on the student table.........





Operators in Sql -
******************
1)in  -The IN operator is used to specify the list of values or sub query in the WHERE clause
Syntax:
SELECT column1, column2,..
FROM table
WHERE column IN (value1, value2, value3,...)

2)like  -The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
There are two wildcards often used in conjunction with the LIKE operator:

          - The percent sign % represents zero, one, or multiple characters
          - The underscore sign _ represents one, single character
          - The _ wildcard represents a single character.
          - It can be any character or number, but each _ represents one, and only one, character.

e.g of queries -
-Select all customers that starts with the letter "a":       SELECT * FROM Customers
                                                             WHERE CustomerName LIKE 'a%';

-Return all customers from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard  characters:                   SELECT * FROM Customers
                               WHERE city LIKE 'L_nd__';

-Return all customers from a city that contains the letter 'L':
                               SELECT * FROM Customers
                               WHERE city LIKE '%L%';

-Return all customers that starts with 'La':
                              SELECT * FROM Customers
                              WHERE CustomerName LIKE 'La%';

-Return all customers that starts with 'a' or starts with 'b':
                              SELECT * FROM Customers
                              WHERE CustomerName LIKE 'a%' OR CustomerName LIKE 'b%';

-Return all customers that ends with 'a':
                              SELECT * FROM Customers
                              WHERE CustomerName LIKE '%a';

-Return all customers that starts with "b" and ends with "s":
                             SELECT * FROM Customers
                             WHERE CustomerName LIKE 'b%s';

-Return all customers that contains the phrase 'or'
                             SELECT * FROM Customers
                             WHERE CustomerName LIKE '%or%';

-Return all customers that starts with "a" and are at least 3 characters in length:
                            SELECT * FROM Customers
                            WHERE CustomerName LIKE 'a__%'; 

-Return all customers that have "r" in the second position:
                           SELECT * FROM Customers
                           WHERE CustomerName LIKE '_r%';

-Return all customers from Spain:
                           SELECT * FROM Customers
                           WHERE Country LIKE 'Spain';

3)Between  -The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates
 
e.g of queries -
-Selects all products with a price between 10 and 20:
                                 SELECT * FROM Products
                                 WHERE Price BETWEEN 10 AND 20;

-To display the products outside the range of the previous example, use NOT BETWEEN:
                                 SELECT * FROM Products
                                 WHERE Price NOT BETWEEN 10 AND 20; 

-BETWEEN with IN
The following SQL statement selects all products with a price between 10 and 20. In addition, the CategoryID must be either 1,2, or 3:
                                 SELECT * FROM Products
                                 WHERE Price BETWEEN 10 AND 20
                                 AND CategoryID IN (1,2,3);  

4)and  -The AND operator is used to filter records based on more than one condition,
e.g of queries  -
-Select all customers from Spain that starts with the letter 'G':
                                 SELECT * FROM Customers
                                 WHERE Country = 'Spain' AND CustomerName LIKE 'G%';



-The AND operator displays a record if all the conditions are TRUE.
-The OR operator displays a record if any of the conditions are TRUE.

-The following SQL statement selects all fields from Customers where Country is "Germany" AND City is "Berlin" AND PostalCode is higher than 12000:
                                 SELECT * FROM Customers
                                 WHERE Country = 'Germany'
                                 AND City = 'Berlin'
                                 AND PostalCode > 1200;

-Combining AND and OR
 Select all Spanish customers that starts with either "G" or "R":
                                SELECT * FROM Customers
                                WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');


5)OR  -The SQL OR operator selects data if any one condition is TRUE
e.g of queries  -
 Select all customers from Germany or Spain:
                                SELECT *  FROM Customers                            
                                WHERE Country = 'Germany' OR Country = 'Spain';

6)NOT IN -return all records that are NOT any of the values in the list.
e.g of queries -
 Return all customers that are NOT from 'Germany', 'France', or 'UK'
                                SELECT * FROM Customers
                                WHERE Country NOT IN ('Germany', 'France', 'UK');





SQL Aggregate Functions - 
*************************
-An aggregate function is a function that performs a calculation on a set of values, and returns a single value.
-The most commonly used SQL aggregate functions are: 
1)MIN() - returns the smallest value within the selected column.......

Syntax-
SELECT MIN(column_name)
FROM table_name
WHERE condition;

e.g query -
           SELECT MIN(Price)
           FROM Products;


2)MAX() - returns the largest value within the selected column.......

Syntax-
SELECT MAX(column_name)
FROM table_name
WHERE condition;

e.g query -
           SELECT MAX(Price)
           FROM Products;

3)COUNT() - returns the number of rows in a set.......

Syntax
SELECT COUNT(column_name)
FROM table_name
WHERE condition;

e.g query -
           SELECT COUNT(*)
           FROM Products;


4)SUM() - returns the total sum of a numerical column.....

Syntax
SELECT SUM(column_name)
FROM table_name
WHERE condition;

e.g query - 
           SELECT SUM(Quantity)
           FROM OrderDetails;


5)AVG() - returns the average value of a numerical column........

Syntax
SELECT AVG(column_name)
FROM table_name
WHERE condition;

e.g query -
           SELECT AVG(Price)
           FROM Products;




SQL Clauses - 
*************
-SQL clause helps us to retrieve a set or bundles of records from the table.
1. WHERE CLAUSE -
WHERE clauses can be used to limit the number of rows to be displayed in the result set, it generally helps in filtering the records.WHERE clause is used in SELECT, UPDATE, DELETE statement, etc........

                                            Employee table

E_ID	Name	        Salary	    City	   Designation	            Date_of_Joining	    Age
1       Sakshi Kumari	 50000	   Mumbai	 Project Manager	      2021-06-20	     24
2	Tejaswini Naik	 75000	   Delhi	 System Engineer	      2019-12-24	     23
3	Anuja Sharma	 40000	   Jaipur	 Manager	              2021-08-15	     26       
4	Anushka Tripathi 90000	   Mumbai	 Software Tester	      2021-06-13             24
5	Rucha Jagtap	 45000	   Bangalore	 Project Manager	      2020-08-09             23
6	Rutuja Deshmukh	 60000	   Bangalore	 Manager	              2019-07-17	     26
7	Swara Baviskar	 55000	   Jaipur	 System Engineer	      2021-10-10	     24
8	Sana Sheik	 45000	   Pune	Software Engineer	              2020-09-10             26
9	Swati Kumari	 50000	   Pune	Software Tester	                      2021-01-01	     25
10	Mayuri Patel	 60000	   Mumbai	 Project Manager	      2020-10-02	     24
11	Simran Khanna	 45500	   Kolhapur	 HR	                      2019-01-02	     26
12	Shivani Wagh	 50500	   Delhi	 Software Developer	      2016-09-10             25
13	Kiran Maheshwari 50000	   Nashik	 HR	                      2013-12-12	     23
14	Tejal Jain	 40000	   Delhi	 Project Manager	      2017-11-10	     25
15	Mohini Shah	 38000	   Pune	Software Developer	              2019-03-05             20

querys as follows -
1)Write a query to retrieve all those records of an employee where employee salary is greater than 50000.
ans -->SELECT * FROM employees WHERE Salary > 50000; 

2)Write a query to update the employee's record and set the updated name as 'Harshada Sharma' where the employee's city name is Jaipur. 
ans -->UPDATE employees SET Name = "Harshada Sharma" WHERE City = "Jaipur";  

3)Write a query to delete an employee's record where the employee's joining date is "2013-12-12".
ans -->DELETE FROM employees WHERE Date_of_Joining = "2013-12-12";


2.GROUP BY CLAUSE - The Group By clause is used to arrange similar kinds of records into the groups in the SQL..The Group by clause in the Structured Query Language is used with Select Statement,The Group By clause is specially used with the aggregate function, i.e., max (), min (), avg (), sum (), count () to group the result based on one or more than one column.

The syntax of Group By clause:
SELECT * FROM TABLENAME GROUP BY COLUMNNAME; 
 
The syntax of Group By clause with Aggregate Functions:
SELECT COLUMNNAME1, Aggregate_FUNCTION (COLUMNNAME) FROM TABLENAME GROUP BY COLUMNNAME; 

querys as follows -
1)Write a query to display all the records of the employees table but group the results based on the age column.
ans -->SELECT * FROM employees GROUP BY Age;  

2)Write a query to display all the records of the employees table grouped by the designation and salary.
ans --> SELECT * FROM employees GROUP BY Salary, Designation;  

3)Write a query to list the number of employees working on a particular designation and group the results by designation of the employee.
ans --> SELECT COUNT (E_ID) AS Number_of_Employees, Designation FROM employees GROUP BY designation;

4)Write a query to display the sum of an employee's salary as per the city grouped by an employee's age.
ans -->  SELECT SUM (Salary) AS Salary, City FROM employees GROUP BY City;


3. HAVING CLAUSE: -When we need to place any conditions on the table's column, we use the WHERE clause in SQL. But if we want to use any condition on a column in Group By clause at that time, we will use the HAVING clause with the Group By clause for column conditions.
Syntax:
TABLENAME GROUP BY COLUMNNAME HAVING CONDITION; 

querys as follows -
1)Write a query to display the name of employees, salary, and city where the employee's maximum salary is greater than 40000 and group the results by designation.
ans -->SELECT Name, City, MAX (Salary) AS Salary FROM employees GROUP BY Designation HAVING MAX (Salary) > 40000; 

2)Write a query to display the name of employees and designation where the sum of an employee's salary is greater than 45000 and group the results by city.
ans --> SELECT Name, Designation, SUM (Salary) AS Salary FROM employees GROUP BY City HAVING SUM (Salary) > 45000;



4)ORDER BY CLAUSE -Whenever we want to sort anything in SQL, we use the ORDER BY clause, The data will be sorted in ascending order whenever the ASC keyword is used with ORDER by clause, and the DESC keyword will sort the records in descending order.
querys as follows -
1)Write a query to sort the records in the ascending order of the employee designation from the employees table.
ans -->  SELECT * FROM employees ORDER BY Designation;  

2)Write a query to display employee name and salary in the ascending order of the employee's salary from the employees table.
ans -->SELECT Name, Salary FROM employees ORDER BY Salary ASC; 
 
3)Write a query to sort the data in descending order of the employee name stored in the employees table.
ans --> SELECT * FROM employees ORDER BY Name DESC;


some queries with logical operators...
**************************************
1)Write a query to retrieve only those records of employees from the employees table where the designation is 'Project Manager' and the City to which the employee belongs to is Mumbai.  
ans --> SELECT * FROM employees WHERE City = "Mumbai" AND Designation = "Project Manager";

2)Write a query to retrieve only those records of an employee from the employees table where employee salary lies between 50000 to 90000.
ans -->  SELECT * FROM employees WHERE Salary BETWEEN 50000 AND 90000; 

3)Write a query to retrieve only those records of employees from the employees table where the employee's designation is 'System Engineer' or the city to which the employee belongs is Mumbai.
ans --> SELECT * FROM employees WHERE Designation = "System Engineer" OR City = "Mumbai";

4)Write a query to retrieve only those records of employees from the employees table where the city to which the employee belongs to is either Mumbai, Bangalore, or Pune.
ans -->  SELECT * FROM employees WHERE City IN ("Mumbai", "Bangalore", "Pune"); 

5)Write a query to retrieve only those records of employees from the employees table where the employee's designation is not Project Manager.
ans --> SELECT * FROM employees WHERE NOT Designation = "Project Manager"; 

6)Write a query to retrieve only those records of employees from the employees table whose salary starts with the digit 5.
ans -->  SELECT * FROM employees WHERE Salary LIKE "5%";  



SQL Constraints -
*****************
SQL constraints are used to specify rules for the data in a table.
Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table.
The following constraints are commonly used in SQL:

1)NOT NULL - Ensures that a column cannot have a NULL value,By default, a column can hold NULL values.
The NOT NULL constraint enforces a column to NOT accept NULL values......
e.g queries -
  1)The following SQL ensures that the "ID", "LastName", and "FirstName" columns will NOT accept NULL values when the   "Persons" table is created:
ans--> CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
    );

  2)To create a NOT NULL constraint on the "Age" column when the "Persons" table is already created, use the following SQL:
ans--> ALTER TABLE Persons
       ALTER COLUMN Age int NOT NULL;


2)UNIQUE - Ensures that all values in a column are different....The UNIQUE constraint ensures that all values in a column are different.Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.
A PRIMARY KEY constraint automatically has a UNIQUE constraint......
e.g queries -
1)The following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:
ans--> CREATE TABLE Persons (
    ID int NOT NULL UNIQUE,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
    );

2)To create a UNIQUE constraint on the "ID" column when the table is already created, use the following SQL:
ans--> ALTER TABLE Persons
       ADD UNIQUE (ID);


3)To drop a UNIQUE constraint, use the following SQL:
ans--> ALTER TABLE Persons
       DROP INDEX UC_Person;


3)PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table........
The PRIMARY KEY constraint uniquely identifies each record in a table.Primary keys must contain UNIQUE values, and cannot contain NULL values.A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields)........
e.g of queries - 
1)The following SQL creates a PRIMARY KEY on the "ID" column when the "Persons" table is created:
ans--> CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
    );


2)To create a PRIMARY KEY constraint on the "ID" column when the table is already created, use the following SQL:
ans--> ALTER TABLE Persons
       ADD PRIMARY KEY (ID);


3)To drop a PRIMARY KEY constraint, use the following SQL:
ans--> ALTER TABLE Persons
       DROP PRIMARY KEY;



4)FOREIGN KEY - Prevents actions that would destroy links between tables,A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table......

Look at the following two tables:

Persons Table-
PersonID	LastName	FirstName	Age
1	         Hansen	        Ola	        30
2	         Svendson	Tove	        23
3	         Pettersen	Kari	        20


Orders Table
OrderID	     OrderNumber	PersonID
1	      77895	          3
2	      44678	          3
3	      22456	          2
4	      24562	          1

Notice that the "PersonID" column in the "Orders" table points to the "PersonID" column in the "Persons" table.
The "PersonID" column in the "Persons" table is the PRIMARY KEY in the "Persons" table.
The "PersonID" column in the "Orders" table is a FOREIGN KEY in the "Orders" table.
The FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.
e.g of queries -
1)The following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:
ans--> CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
    );


2)To create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created, use the following SQL:
ans--> ALTER TABLE Orders
       ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);


3)To drop a FOREIGN KEY constraint, use the following SQL:
ans--> ALTER TABLE Orders
       DROP FOREIGN KEY FK_PersonOrder;



5)CHECK - The CHECK constraint is used to limit the value range that can be placed in a column,If you define a CHECK constraint on a column it will allow only certain values for this column.
e.g of queries -
1)The following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created. The CHECK constraint ensures that the age of a person must be 18, or older:
ans-->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);


2)To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:
ans -->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);

3)To create a CHECK constraint on the "Age" column when the table is already created, use the following SQL:
ans-->ALTER TABLE Persons
      ADD CHECK (Age>=18);


4)To drop a CHECK constraint, use the following SQL:
ans-->ALTER TABLE Persons
      DROP CONSTRAINT CHK_PersonAge;



6)DEFAULT -The DEFAULT constraint is used to set a default value for a column.
The default value will be added to all new records, if no other value is specified..
e.g of queries -
1)The following SQL sets a DEFAULT value for the "City" column when the "Persons" table is created - 
ans -->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);


2)The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():
ans -->CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT GETDATE()
);


3)To create a DEFAULT constraint on the "City" column when the table is already created, use the following SQL:
ans -->ALTER TABLE Persons
       ALTER City SET DEFAULT 'Sandnes';


4)To drop a DEFAULT constraint, use the following SQL:
ans -->ALTER TABLE Persons
ALTER City DROP DEFAULT;


7)INDEX - The CREATE INDEX statement is used to create indexes in tables.

Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.
-e.g of queriesCreates an index on a table. Duplicate values are allowed.
ans-->CREATE INDEX index_name
ON table_name (column1, column2, ...);

1)The SQL statement below creates an index named "idx_lastname" on the "LastName" column in the "Persons" table:
ans-->CREATE INDEX idx_lastname
      ON Persons (LastName);

2)If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:
ans-->CREATE INDEX idx_pname
      ON Persons (LastName, FirstName);


3)The DROP INDEX statement is used to delete an index in a table.
ans-->ALTER TABLE table_name
      DROP INDEX index_name;





joins -
*******
SQL Join statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are as follows: 

INNER JOIN
LEFT JOIN
RIGHT JOIN
FULL JOIN
NATURAL JOIN 


Consider the two tables below as follows: 

Student table - 
Roll_no     name         Address            phone             age
  1        harsh          Delhi           5236569874          18
  2        pratik         bihar           2569854752          19
  3        riyanka        siliguri        6989523654          20
  4         deep          ramnagar        7896523658          18
  5        saptarhi       kolkatta        7896523658          19
  6        dhanraj        barabajar       9857412358          20
  7        rohit          balurghat       8752145632          18
  8        niraj          alipur          9874526589          19


StudentCourse table -
Course_id      Roll_no
   1              1
   2              2
   2              3
   3              4
   1              5
   4              9
   5              10
   4              11



1) Inner Join - The INNER JOIN keyword selects all rows from both the tables as long as the condition is satisfied
Syntax -
         
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
INNER JOIN table2
ON table1.matching_column = table2.matching_column;


table1: First table.
table2: Second table
matching_column: Column common to both the tables.


-Example Queries(INNER JOIN)
This query will show the names and age of students enrolled in different courses-----  

SELECT StudentCourse.COURSE_ID, Student.NAME, Student.AGE FROM Student
INNER JOIN StudentCourse
ON Student.ROLL_NO = StudentCourse.ROLL_NO;

Output -
********
Course_Id      Name        Age
1             harsh        18
2             pratik       19
2            riyanka       20
3             deep         18
1           saptarahi      19


2) LEFT JOIN - This join returns all the rows of the table on the left side of the join and matches rows for the table on the right side of the join.For the rows for which there is no matching row on the right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.
Syntax: 

SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
LEFT JOIN table2
ON table1.matching_column = table2.matching_column;


table1: First table.
table2: Second table
matching_column: Column common to both the tables.


Example Queries(LEFT JOIN): 
SELECT Student.NAME,StudentCourse.COURSE_ID 
FROM Student
LEFT JOIN StudentCourse 
ON StudentCourse.ROLL_NO = Student.ROLL_NO;

Output -
********
          Name          Course_id                           
          harsh            1
          pratik           2
          riyanka          2
          deep             3
          saptarahi        1   
          dhanraj         null
          rohit           null
          niraj           null
              


3). RIGHT JOIN :
RIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of the join. For the rows for which there is no matching row on the left side, the result-set will contain null. RIGHT JOIN is also known as RIGHT OUTER JOIN.

Syntax: 

SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
RIGHT JOIN table2
ON table1.matching_column = table2.matching_column;


table1: First table.
table2: Second table
matching_column: Column common to both the tables.


Example Queries(RIGHT JOIN):
SELECT Student.NAME,StudentCourse.COURSE_ID 
FROM Student
RIGHT JOIN StudentCourse 
ON StudentCourse.ROLL_NO = Student.ROLL_NO;

Output -
********
          Name          Course_id                           
          harsh            1
          pratik           2
          riyanka          2
          deep             3
          saptarahi        1   
          null             4
          null             5
          null             4


4). FULL JOIN :
FULL JOIN creates the result-set by combining results of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both tables. For the rows for which there is no matching, the result-set will contain NULL values.....

Syntax:  
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
FULL JOIN table2
ON table1.matching_column = table2.matching_column;


table1: First table.
table2: Second table
matching_column: Column common to both the tables. 

Example Queries(FULL JOIN): 
SELECT Student.NAME,StudentCourse.COURSE_ID 
FROM Student
FULL JOIN StudentCourse 
ON StudentCourse.ROLL_NO = Student.ROLL_NO; 

Output -
********
          Name          Course_id                           
          harsh            1
          pratik           2
          riyanka          2
          deep             3
          saptarahi        1   
          Dhanraj         null
          rohit           null
          niraj           null
          null             4
          null             5
          null             4


5) Cross Join - The CROSS JOIN keyword returns all records from both tables,it is very lengthy approach hence it is not widely used....in cross join no need of foreign key of table1 and primary key of table2..

synatx of cross join - 

select columns
from table1
cross join table2;


---Stored procedure and stored Functions completed from notebook............................ 



-Normalization in Sql - 
***********************
To divide data into multiple tables to reduce redundancy is known as normalization, It is used for to maintain data integraity......

Advantages of Normalization -
-Normalization helps to minimize data redundancy.
-Greater overall database organization.
-Data consistency within the database.
-Much more flexible database design.
-Enforces the concept of relational integrity.

prime attribute- those attributes which makes their contribution for formation of the primary key.....
non -prime attribute-those attributes which not makes their contribution for formation of the primary key.....

1) 1NF - Table should not contain multi-level attributes, A relation will be 1NF if it contains an atomic value.
It states that an attribute of a table cannot hold multiple values. It must hold only single-valued attribute.
First normal form disallows the multi-valued attribute, composite attribute, and their combinations.
EMPLOYEE table:

EMP_ID	EMP_NAME	EMP_PHONE	EMP_STATE
14	John	       7272826385,          UP
                       9064738238
	   
20	Harry	       8574783832	   Bihar

12	Sam	       7390372389,
                       8589830302	   Punjab

Relation EMPLOYEE table is not in 1NF because of multi-valued attribute EMP_PHONE,

The decomposition of the EMPLOYEE table into 1NF has been shown below: - 
EMP_ID	EMP_NAME	EMP_PHONE	EMP_STATE
14	John	       7272826385	  UP
14	John	       9064738238	  UP
20	Harry	       8574783832	  Bihar
12	Sam	       7390372389	  Punjab
12	Sam	       8589830302	  Punjab


2) 2NF -In the 2NF, relational must be in 1NF, In the second normal form, all non-key attributes are fully functional dependent on the candidate key...
TEACHER table -

TEACHER_ID	SUBJECT	     TEACHER_AGE
 25	       Chemistry	30
 25	       Biology	        30
 47	       English       	35
 83	       Math	        38
 83	       Computer    	38
-here TEACHER_ID is a primary key and TEACHER_ID+subject is the candidate key.....
-In the given table, non-prime attribute TEACHER_AGE is dependent on TEACHER_ID which is a proper subset of a candidate key. -That's why it violates the rule for 2NF.
-To convert the given table into 2NF, we decompose it into two tables:-

TEACHER_DETAIL table:
TEACHER_ID	TEACHER_AGE
  25	           30
  47	           35
  83	           38

TEACHER_SUBJECT table:
TEACHER_ID	SUBJECT
  25	       Chemistry
  25	       Biology
  47	       English
  83	       Math
  83	       Computer



3) 3NF - A relation will be in 3NF if it is in 2NF, there should be no transitive dependency.
(Transitive dependency -when one column depends on a column which is not primary key.........)
Table as follows - 
Roll_No      State       City
1           punjab      Mohali
2           Haryana     Ambata
3           punjab      Mohali
4           Haryana     Ambata
5           Bihar       patna

Here Roll_No is primary key, and Roll_No is prime attribute and State,city is a non-prime attributes....
here state is non-prime attrbute which is depend on prime attribute Roll_No this is accepted but City is non-prime attrbute which is depend on again non-prime attribute State and this condition is not acceptable so here non-prime attribute city which is depend on another non-prime attribute i.e is state so Here Trasitive dependency occurs here.........this is not 3NF......so we breaks the table.....

1st table -
Roll_No      State        
1            punjab
2            Haryana     
3            punjab
4            Haryana     
5            Bihar       


2nd table -
State        City
punjab      Mohali
Haryana     Ambata
Bihar       patna

























https://www.javatpoint.com/dbms-first-normal-form









