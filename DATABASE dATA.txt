- A database is an organized collection of data stored in a computer system and usually controlled by a   database management system (DBMS). 

-Types of the database as follows - 

- Hierarchical databases-
- Network databases-
- Object-oriented databases-
- Relational databases-
- Cloud Database-
- Centralized Database-
- Operational Database-
- NoSQL databases- 


1)Hierarchical databases - 
Hierarchical databases are useful when you need to represent data in a tree-like hierarchy. The perfect example of a hierarchical data model is the navigation file.

2)Network databases - 
A network database is a database model where numerous records or files can link to multiple owner files.

3)Object-oriented databases -
object-oriented databases (OODB) are databases that represent data in the form of objects and classes. In object-oriented terminology, an object is a real-world entity, and a class is a collection of objects. Object-oriented databases follow the fundamental principles of object-oriented programming (OOP).

4)Relational databases -
A relational database is a collection of information that organizes data in predefined relationships where data is stored in one or more tables (or "relations") of columns and rows, making it easy to see and understand how different data structures relate to each other.

5)Cloud Database -
A cloud database is a database built to run in a public or hybrid cloud environment to help organize, store, and manage data within an organization.

6)Centralized Database -
A centralized database (sometimes abbreviated CDB) is a database that is located, stored, and maintained in a single location.......e.g cpu

7)Operational Database -
Operational databases, which can be based on SQL vs. NoSQL, are the source for data warehouses and are critical to business analytics operations. Popular operational database examples include Apache Cassandra and AWS DynamoDB.

8)NoSQL databases -
NoSQL is a type of database management system (DBMS) that is designed to handle and store large volumes of unstructured and semi-structured data.......




-if you want to see the table description after table creation then use command i.e      desc table_name


DDL  -
*****
1)create  -
This command is used to create the database or its objects (like table, index, function, views, store procedure, and triggers).  

CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);


syntax for insert values in table -
INSERT INTO table_name values(value1, value2, value3, ...);

INSERT INTO table_name (column1, column2, column3, ...)values(value1, value2, value3, ...);



2)rename  -
This is used to rename the structure of the database.

(syntax for_table)-
ALTER TABLE table_name
RENAME TO new_table_name;

(syntax for column)-
ALTER TABLE table_name
RENAME COLUMN old_name TO new_name;


3)Drop -
This command is used to delete objects from the database.

(syntax for_table)-
DROP TABLE table_names;

(syntax for column)-
ALTER TABLE table_name
DROP COLUMN column_names;


4)Truncate  -The TRUNCATE TABLE command deletes the data inside a table, but not the table itself.
TRUNCATE TABLE table_name;

5)Alter -The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
 -To add a column in a table, use the following syntax:-
  ALTER TABLE table_name ADD column_name datatype;
  
 -To delete a column in a table, use the following syntax
  ALTER TABLE table_name DROP COLUMN column_name;
 
 -To rename a column in a table, use the following syntax:
  ALTER TABLE table_name RENAME COLUMN old_name to new_name;


DML -
*****
1)INSERT: It is used to insert data into a table.
syntax - INSERT INTO table_name VALUES (value1, value2, value3, ...);

-Insert Multiple Rows It is also possible to insert multiple rows in one statement.
e.g - INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES
('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'),
('Greasy Burger', 'Per Olsen', 'Gateveien 15', 'Sandnes', '4306', 'Norway'),
('Tasty Tee', 'Finn Egan', 'Streetroad 19B', 'Liverpool', 'L1 0AA', 'UK');



2)UPDATE: It is used to update existing data within a table.
syntax - UPDATE table_name
         SET column1 = value1, column2 = value2, ...
         WHERE condition;

e.g     UPDATE Customers
        SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
        WHERE CustomerID = 1;

3)DELETE: It is used to delete records from a database table.
syntax - DELETE FROM table_name WHERE condition;
e.g    - DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';



TCL - 
*****
1) Commit - If you want to save all the commands which are executed in a transaction, then just after                      completing the transaction, you have to execute the commit command. This command will save all the             commands which are executed on a table. All these changes made to the table will be saved to the               disk permanently.
           -Whenever the commit command is executed in SQL, all the updations which we have carried on the                 table will be uploaded to the server, and hence our work will be saved.
           -for the turn off the auto-commit by setting the value of auto-commit=0; and for turn on auto-                  commit=1;

2) rollback -The rollback command is used to get back to the previous permanent status of the table, which is              saved by the commit command.We will execute the ROLLBACK command to get the original table that              we have saved before executing the last command.
            -scope of rollback command is up to previous commit.........


3) savepoint - this is a point where you can rollback your transaction to a certain point...
-syntax for create savepoint-  savepoint savepoint_name;
-syntax for rollback transactions upto savepoint-  rollback to savepoint_name;


DQL -
*****
1)Select- It is used to retrieve data from the database........ 


DCL- (Data Control Language)
****************************
DCL includes commands such as GRANT and REVOKE which mainly deal with the rights, permissions, and other controls of the database system.

-first check how many users in your system by using command           select user from mysql.user;
 after this command it will show you lists of users.....then if you want to check the what are the permissions having user then use following command    show grants for 'root'@'localhost';      here root is username this command will show you all permissions of that user......
-if you want to give all permissions to user then use following command-   GRANT ALL PRIVILEGES ON * . * To 'root'@'localhost'; 
here root is a username......... 
-if you want to remove all permissions to user then use following command-  REVOKE ALL PRIVILEGES ON * . * From 'root'@'localhost'; 
here root is a username.........

types of the permission list-
-all PRIVILEGES -this would allow a mysql user full access to a designed database......
-create  -allows them for create new tables or database......
-drop  -allows them for delete new tables or database......
-delete  -allows them for delete rows from tables......
-Insert  -allows them to insert rows into tables.....
-update  -allows them to update rows in table.......



1)Grant - It helps to provide any kind of access to any user.......
e.g   grant select,update on student to rahul    -here select and update permissions are given to rahul user on the student table.........

2)revoke - It is used to take back the access from user.......  
e.g   revoke select,update on student to rahul    -here select and update permissions are not given to rahul user on the student table.........





Operators in Sql -
******************
1)in  -The IN operator is used to specify the list of values or sub query in the WHERE clause
Syntax:
SELECT column1, column2,..
FROM table
WHERE column IN (value1, value2, value3,...)

2)like  -The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
There are two wildcards often used in conjunction with the LIKE operator:

          - The percent sign % represents zero, one, or multiple characters
          - The underscore sign _ represents one, single character
          - The _ wildcard represents a single character.
          - It can be any character or number, but each _ represents one, and only one, character.

e.g of queries -
-Select all customers that starts with the letter "a":       SELECT * FROM Customers
                                                             WHERE CustomerName LIKE 'a%';

-Return all customers from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard  characters:                   SELECT * FROM Customers
                               WHERE city LIKE 'L_nd__';

-Return all customers from a city that contains the letter 'L':
                               SELECT * FROM Customers
                               WHERE city LIKE '%L%';

-Return all customers that starts with 'La':
                              SELECT * FROM Customers
                              WHERE CustomerName LIKE 'La%';

-Return all customers that starts with 'a' or starts with 'b':
                              SELECT * FROM Customers
                              WHERE CustomerName LIKE 'a%' OR CustomerName LIKE 'b%';

-Return all customers that ends with 'a':
                              SELECT * FROM Customers
                              WHERE CustomerName LIKE '%a';

-Return all customers that starts with "b" and ends with "s":
                             SELECT * FROM Customers
                             WHERE CustomerName LIKE 'b%s';

-Return all customers that contains the phrase 'or'
                             SELECT * FROM Customers
                             WHERE CustomerName LIKE '%or%';

-Return all customers that starts with "a" and are at least 3 characters in length:
                            SELECT * FROM Customers
                            WHERE CustomerName LIKE 'a__%'; 

-Return all customers that have "r" in the second position:
                           SELECT * FROM Customers
                           WHERE CustomerName LIKE '_r%';

-Return all customers from Spain:
                           SELECT * FROM Customers
                           WHERE Country LIKE 'Spain';

3)Between  -The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates
 
e.g of queries -
-Selects all products with a price between 10 and 20:
                                 SELECT * FROM Products
                                 WHERE Price BETWEEN 10 AND 20;

-To display the products outside the range of the previous example, use NOT BETWEEN:
                                 SELECT * FROM Products
                                 WHERE Price NOT BETWEEN 10 AND 20; 

-BETWEEN with IN
The following SQL statement selects all products with a price between 10 and 20. In addition, the CategoryID must be either 1,2, or 3:
                                 SELECT * FROM Products
                                 WHERE Price BETWEEN 10 AND 20
                                 AND CategoryID IN (1,2,3);  

4)and  -The AND operator is used to filter records based on more than one condition,
e.g of queries  -
-Select all customers from Spain that starts with the letter 'G':
                                 SELECT * FROM Customers
                                 WHERE Country = 'Spain' AND CustomerName LIKE 'G%';



-The AND operator displays a record if all the conditions are TRUE.
-The OR operator displays a record if any of the conditions are TRUE.

-The following SQL statement selects all fields from Customers where Country is "Germany" AND City is "Berlin" AND PostalCode is higher than 12000:
                                 SELECT * FROM Customers
                                 WHERE Country = 'Germany'
                                 AND City = 'Berlin'
                                 AND PostalCode > 1200;

-Combining AND and OR
 Select all Spanish customers that starts with either "G" or "R":
                                SELECT * FROM Customers
                                WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');


5)OR  -The SQL OR operator selects data if any one condition is TRUE
e.g of queries  -
 Select all customers from Germany or Spain:
                                SELECT *  FROM Customers                            
                                WHERE Country = 'Germany' OR Country = 'Spain';

6)NOT IN -return all records that are NOT any of the values in the list.
e.g of queries -
 Return all customers that are NOT from 'Germany', 'France', or 'UK'
                                SELECT * FROM Customers
                                WHERE Country NOT IN ('Germany', 'France', 'UK');





SQL Aggregate Functions - 
*************************
-An aggregate function is a function that performs a calculation on a set of values, and returns a single value.
-The most commonly used SQL aggregate functions are: 
1)MIN() - returns the smallest value within the selected column.......

Syntax-
SELECT MIN(column_name)
FROM table_name
WHERE condition;

e.g query -
           SELECT MIN(Price)
           FROM Products;


2)MAX() - returns the largest value within the selected column.......

Syntax-
SELECT MAX(column_name)
FROM table_name
WHERE condition;

e.g query -
           SELECT MAX(Price)
           FROM Products;

3)COUNT() - returns the number of rows in a set.......

Syntax
SELECT COUNT(column_name)
FROM table_name
WHERE condition;

e.g query -
           SELECT COUNT(*)
           FROM Products;


4)SUM() - returns the total sum of a numerical column.....

Syntax
SELECT SUM(column_name)
FROM table_name
WHERE condition;

e.g query - 
           SELECT SUM(Quantity)
           FROM OrderDetails;


5)AVG() - returns the average value of a numerical column........

Syntax
SELECT AVG(column_name)
FROM table_name
WHERE condition;

e.g query -
           SELECT AVG(Price)
           FROM Products;
































 





















